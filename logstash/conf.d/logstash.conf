input {
  file {
    path => ["/var/lib/openshift/**/log/*", "/var/lib/openshift/**/logs/*"]
    stat_interval => 1
    type => "gear_log"
  }

  cgroups {
    interval => 3
    type => "cgroups"
  }
}

filter {
	#if [path] =~ /asdfasdfsdf/ {
		#drop { }
  #}

  if [type] == "gear_log" {
    grok {
      patterns_dir => "patterns"
      break_on_match => false
      overwrite => ["message", "timestamp"]

      match => {
        "path" => [
          "/var/lib/openshift/(?<gear_uuid>[^/]+)/",
          "/cgroup/all/openshift/(?<gear_uuid>[^/]+)/"
        ]

        "message" => [
          "%{NODEJS_TIMESTAMP:timestamp}: %{GREEDYDATA:message}",
          "\[%{RUBY_TIMESTAMP:timestamp}\] %{GREEDYDATA:message}",
          "%{JBOSS_BOOT_LOG_TIMESTAMP:timestamp}\s*(?<log_level>\S+)\s*\[%{JAVACLASS:java_class}\]\s*%{GREEDYDATA:message}",
          "%{JBOSS_SERVER_LOG_TIMESTAMP:timestamp}\s*(?<log_level>\S+)\s*\[%{JAVACLASS:java_class}\]\s*%{GREEDYDATA:message}"
        ]
      }
    }
  }

  date {
    match => ["timestamp",

              # node.js
              "EEE MMM dd yyyy HH:mm:ss zzzZZ (zzz)",

              # ruby
              "EEE MMM dd HH:mm:ss yyyy",

              # jboss boot log
              "HH:mm:ss,SSS",

              # jboss server log
              "yyyy/MM/dd HH:mm:ss,SSS"
             ]

    remove_field => ["timestamp"]
  }

  openshift {
    variables => [
      "OPENSHIFT_APP_NAME",
      "OPENSHIFT_NAMESPACE"
    ]
  }
}

output {
  if [type] == "gear_log" {
    file {
      path => "/var/log/openshift/logstash/%{gear_uuid}/gear_logs"
    }
  } else if [type] == "cgroups" {
    file {
      path => "/var/log/openshift/logstash/%{gear_uuid}/cgroups"
    }
  }
}
